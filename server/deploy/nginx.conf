user www-data;

# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes auto;

pid /run/nginx.pid;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 1024;
    # optimized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;
    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}

http {
    # to boost I/O on HDD we can disable access logs
    # access_log off;
    # Only log critical errors.
    # error_log /var/log/nginx/error.log crit
    access_log /dev/stdout;
    error_log /dev/stdout;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile            on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush          on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay         on;

    # server will close connection after this time -- default 75 
    keepalive_timeout   1000;

    # internal parameter to speed up hashtable lookups
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;

    default_type        application/octet-stream;

    # Don't tell nginx version to clients.
    server_tokens off;
    
    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # The default value for client_max_body_size directive is 1 MiB.
    # https://stackoverflow.com/questions/28476643/default-nginx-client-max-body-size
    # It can be set in http, server and location context â€” as in the most cases, this directive in a nested block takes precedence over the same directive in the ancestors blocks.
    # Syntax:   client_max_body_size size;
    # Default:  client_max_body_size 1m;
    # Context:  http, server, location
    client_max_body_size 500M;

    # Define the usage of the gzip compression algorithm to reduce the amount of data to transmit
    gzip on;
    gzip_min_length 10240;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    index   index.html index.htm;

    # server {
    #     listen       80 default_server;
    #     listen       [::]:80 default_server;
    #     server_name  localhost;
    #     root         /var/www/html;
    #     location / {
    #         include uwsgi_params;
    #         uwsgi_pass docsim:5000;
    #         # uwsgi_pass unix:/tmp/uwsgi.socket;
    #         uwsgi_read_timeout 1h;
    #         uwsgi_send_timeout 1h;
    #         proxy_send_timeout 1h;
    #         proxy_read_timeout 1h;
    #     }

    #     # location ^~ /static/ {
    #     #     root /docsim/server;
    #     #     access_log off;
    #     # }
    # }
    # server {
    #         listen              7777 ssl;
    #         server_name localhost;
    #         ssl_certificate     /etc/nginx/server.crt;
    #         ssl_certificate_key /etc/nginx/server.key;
    #         root         /var/www/html;

    #         location / {
    #             include uwsgi_params;
    #             uwsgi_pass docsim:5000;
    #             # uwsgi_pass unix:/tmp/uwsgi.socket;
    #             uwsgi_read_timeout 1h;
    #             uwsgi_send_timeout 1h;
    #             proxy_send_timeout 1h;
    #             proxy_read_timeout 1h;
    #         }

    #         # location ^~ /static/ {
    #         #     root /docsim/server;
    #         #     access_log off;
    #         # }
    #     }
    server {
        listen 80;
        listen 443 default_server ssl;
        ssl_certificate     /etc/nginx/server.crt;
        ssl_certificate_key /etc/nginx/server.key;
        error_page 497 301 =307 https://$host:$server_port$request_uri;
        location /{
            include uwsgi_params;
            uwsgi_pass docsim:5000;
            uwsgi_read_timeout 1h;
            uwsgi_send_timeout 1h;
            proxy_send_timeout 1h;
            proxy_read_timeout 1h;
            proxy_redirect off;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Ssl on;
        }
    }
}